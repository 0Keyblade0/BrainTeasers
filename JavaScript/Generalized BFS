;;; Shortest Path Finder in a Graph using Breadth-First Search (Common Lisp)
;;;
;;; This code finds the shortest path between two nodes (`start` and `end`) in a graph
;;; represented as an adjacency list (`net`) using a **breadth-first search (BFS)** strategy.
;;;
;;; - `shortest-path`: Main function that sets up BFS to find a path from `start` to `end`.
;;;                    It returns the path as a list of nodes in order from start to end.
;;;
;;; - `bfs`: General-purpose breadth-first search that takes:
;;;     - a list of current paths (initially just the start node),
;;;     - a predicate to test if the goal is reached,
;;;     - a generator function to get neighboring nodes.
;;;
;;; - `new-paths`: Given a current path and a list of neighbors, it creates new paths
;;;                by prepending each unvisited neighbor to the path (avoids cycles).
;;;
;;; Example:
;;;   (shortest-path 'a 'd '((a b c) (b d) (c d)))  => (a b d) or (a c d)

(defun shortest-path (start end net) 
  (reverse 
   (bfs (list (list start))
        (lambda (state)
          (eql end state))
        (lambda (path)
          (cdr (assoc (car path) net))))))

(defun bfs (paths pred gen) 
  (if (null paths) 
      nil
    (let* ((path (car paths))  
           (neighbors (funcall gen path))
           (final-state (find-if pred neighbors)))
      (if final-state
          (cons final-state path)
        (bfs (append (cdr paths)  
                     (new-paths path neighbors))
             pred 
             gen)))))

(defun new-paths (path nbors)
  (mapcan (lambda (n) 
            (if (member n path)
                nil
              (list (cons n path)))) 
          nbors))
