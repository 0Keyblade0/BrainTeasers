/**
 * Pattern Matching Engine
 * -----------------------
 * This code defines a recursive pattern matching function that can match primitive values,
 * arrays, and objects (even nested ones), with support for variables (e.g., "?x").
 * 
 * The main function `match(pattern, object, bindings)` tries to match a `pattern` to a given `object`,
 * producing all possible variable bindings that make the match succeed.
 *
 * Supported features:
 * - Variables: Strings that start with "?" can match any value.
 * - Primitive Matching: Simple values like numbers and strings must match exactly.
 * - Object/Array Matching: Recursively compares structure and values.
 * 
 * Example:
 *   match({ name: "?n", age: 30 }, { name: "Alice", age: 30 })
 *   => [ { "?n": "Alice" } ]
 *
 * Useful for:
 * - Logic programming
 * - Rule-based systems
 * - Querying or filtering JSON-like structures
 */

export const match = (pattern, object, bindings = [{}]) =>
  isVariable(pattern)
    ? matchVariable(pattern, object, bindings)
    : isPrimitive(pattern)
      ? matchPrimitive(pattern, object, bindings)
      : matchObject(pattern, object, bindings);

const isVariable = (pattern) => typeof pattern === "string" && pattern.startsWith("?");

const isPrimitive = (pattern) => pattern !== Object(pattern);

const matchVariable = (pattern, object, bindings) =>
  bindings.flatMap(binding =>
    pattern in binding
      ? isEqual(binding[pattern], object)
        ? [binding]
        : []
      : [{ ...binding, [pattern]: object }]
  );

const matchPrimitive = (pattern, object, bindings) => pattern === object ? bindings : [];

const matchObject = (pattern, object, bindings) => sameArrayNess(pattern, object) &&
  Object.entries(pattern).every(([key, value]) =>
    key in object
      ? (bindings = match(value, object[key], bindings)) && bindings.length !== 0
      : false
  )
    ? bindings
    : [];

const sameArrayNess = (a, b) => Array.isArray(a) === Array.isArray(b);

const isEqual = (a, b) =>
  isPrimitive(a)
    ? isPrimitiveEqual(a, b)
    : isObjectEqual(a, b);

const isPrimitiveEqual = (a, b) => a === b;

const isObjectEqual = (a, b) => sameArrayNess(a, b) &&
  Object.keys(a).length === Object.keys(b).length &&
  Object.entries(a).every(([key, value]) =>
    key in b && isEqual(value, b[key])
  );
